<<<<<<< .mine
/**
 * @file
 * @brief This file implements the storage server.
 *
 * The storage server should be named "server" and should take a single
 * command line argument that refers to the configuration file.
 * 
 * The storage server should be able to communicate with the client
 * library functions declared in storage.h and implemented in storage.c.
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <string.h>
#include <assert.h>
#include <signal.h>
#include <time.h>
#include "utils.h"
#include "database.h"

#define MAX_LISTENQUEUELEN 20	///< The maximum number of queued connections.
#define LOGGING 2 

// Use the global server file pointer located in Utils.h. Available here for file creation on server start 
FILE *sfp;

// The database variable to hold everything!
struct database *db;
struct config_params params2;

/**
 * @brief Insert or update a table, key, value pair to the database.
 *
 * @param table	: the table to insert or update
 * @param key	: the key to insert or update
 * @param value	: the value to insert or update
 * @return Returns 0 on success, -1 on table not found, -2 on key not found
 */
int server_set (char *table, char *key, char *value) {
	return DB_set(db, table, key, value);
}

/**
 * @brief Process a command from the client.
 *

 * @param sock The socket connected to the client.
 * @param cmd The command received from the client.
 * @return Returns 0 on success, -1 otherwise.
 */
int handle_command(int sock, char *cmd)
{
    int status;
    char buf[100];
    sprintf(buf, "Processing command '%s'\n", cmd);
    logger(buf, LOGGING, 1); 

	char operation[50];
 	sscanf(cmd, "%s", operation);
	if(strcmp(operation, "CONN")==0)
	{
		char hostname [50];
		int portnumb;
		sscanf(cmd, "%s %s %d", operation, hostname, &portnumb);

		/*if((hostname==server.hostname)&&(portnumb==server.portnumb))
		{
			char* smessage = "S";
			sendall(sock, smessage, strlen(cmd));

			sendall(sock, "\n", 1);
		}
		else
		{
			char* emessage = "E";

			sendall(sock, Emessage, strlen(cmd));
			sendall(sock, "\n", 1);
		}*/
	}
	else if(strcmp(operation, "AUTH")==0)
	{
		char username [50];
		char password [50];
		//sscanf(cmd, "%s %s %s", operation, username, password);
		if((strcmp(username, params2.username)==0)&&(strcmp(password, params2.password)==0))
		{
			char* smessage = "S";
			sendall(sock, smessage, strlen(cmd));
			sendall(sock, "\n", 1);
		}
		else
		{
			char* emessage = "E";
			sendall(sock, emessage, strlen(cmd));
			sendall(sock, "\n", 1);
		}
	
	}
	else if(strcmp(operation, "SET")==0)
	{
		char table [50];
		char key [50];
		char record [50];
		//sscanf(cmd, "%s %s %s %s", operation, table, key, record);
	
		status = set("THE DATABASE", key, record);
		if(status==-1)
		{
			char* emessage = "E ERR_TABLE_NOT_FOUND";
			sendall(sock, emessage, strlen(cmd));
			sendall(sock, "\n", 1);
		}
		else
		{
			char* smessage = "S";
			sendall(sock, smessage, strlen(cmd));
			sendall(sock, "\n", 1);
		}
	}
	else if(strcmp(operation, "GET")==0)
	{
		char table [50];
		char key [50];
		//sscanf(cmd, "%s %s %s", operation, table, key);
		
		char returnval[50];
		status = get("THE DATABASE", key, returnval);
		if(status==-1)
		{
			char* emessage = "E ERR_TABLE_NOT_FOUND";
			sendall(sock, emessage, strlen(cmd));
			sendall(sock, "\n", 1);
		}
		else if(status==-2)
		{
			char* emessage = "E ERR_KEY_NOT_FOUND";
			sendall(sock, emessage, strlen(cmd));						
			sendall(sock, "\n", 1);
		}
		else
		{
			char smessage[50];
			sprintf(smessage, "S %s", returnval);
			sendall(sock, smessage, strlen(cmd));
			sendall(sock, "\n", 1);
		}
	}
	else if(strcmp(operation, "DIS")==0)
	{
		;
	}
	else if(strcmp(operation, "EXIT")==0)
	{
		;
	}
	else
	{
		char* emessage = "E ERR_INVALID_PARAM";
		sendall(sock, emessage, strlen(cmd));
		sendall(sock, "\n", 1);
	}
	return 0;
}



/**
 * @brief Start the storage server.
 *
 * This is the main entry point for the storage server.  It reads the
 * configuration file, starts listening on a port, and proccesses
 * commands from clients.
 */
int main(int argc, char *argv[])
{
    // If file logging is enabled, create the appropriate server logging file
    if(LOGGING == 2) {
        char fname[255];
        time_t ti;
        struct tm * t;
        time ( &ti );
        t = localtime ( &ti );
        sprintf(fname, "Server-%d-%d-%d-%d-%d-%d.log", t->tm_year+1900, t->tm_mon+1, t->tm_mday, t->tm_hour, t->tm_min, t->tm_sec);
        sfp = fopen(fname, "w");
    }

	// Process command line arguments.
	// This program expects exactly one argument: the config file name.
	assert(argc > 0);
	if (argc != 2) {
		printf("Usage %s <config_file>\n", argv[0]);
		exit(EXIT_FAILURE);
	}
	char *config_file = argv[1];

	// Read the config file.
	struct config_params params;
	int status = read_config(config_file, &params);
	if (status != 0) {
		printf("Error processing config file.\n");
		exit(EXIT_FAILURE);
	}

    // Log info to the logger function
    char buf[100];
    sprintf(buf, "Server on %s:%d\n", params.server_host, params.server_port);
    logger(buf, LOGGING, 1);

	// Create a socket.
	int listensock = socket(PF_INET, SOCK_STREAM, 0);
	if (listensock < 0) {
		printf("Error creating socket.\n");
		exit(EXIT_FAILURE);
	}

	// Allow listening port to be reused if defunct.
	int yes = 1;
	status = setsockopt(listensock, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof yes);
	if (status != 0) {
		printf("Error configuring socket.\n");
		exit(EXIT_FAILURE);
	}

	// Bind it to the listening port.
	struct sockaddr_in listenaddr;
	memset(&listenaddr, 0, sizeof listenaddr);
	listenaddr.sin_family = AF_INET;
	listenaddr.sin_port = htons(params.server_port);
	inet_pton(AF_INET, params.server_host, &(listenaddr.sin_addr)); // bind to local IP address
	status = bind(listensock, (struct sockaddr*) &listenaddr, sizeof listenaddr);
	if (status != 0) {
		printf("Error binding socket.\n");
		exit(EXIT_FAILURE);
	}

	// Listen for connections.
	status = listen(listensock, MAX_LISTENQUEUELEN);
	if (status != 0) {
		printf("Error listening on socket.\n");
		exit(EXIT_FAILURE);
	}

	// Listen loop.
	int wait_for_connections = 1;
	while (wait_for_connections) {
		// Wait for a connection.
		struct sockaddr_in clientaddr;
		socklen_t clientaddrlen = sizeof clientaddr;
		int clientsock = accept(listensock, (struct sockaddr*)&clientaddr, &clientaddrlen);
		if (clientsock < 0) {
			printf("Error accepting a connection.\n");
			exit(EXIT_FAILURE);
		}

        char buf[100];
        sprintf(buf, "Got a connection from %s:%d.\n", inet_ntoa(clientaddr.sin_addr), clientaddr.sin_port);
        logger(buf, LOGGING, 1); 

		// Get commands from client.
		int wait_for_commands = 1;
		do {
			// Read a line from the client.
			char cmd[MAX_CMD_LEN];
			int status = recvline(clientsock, cmd, MAX_CMD_LEN);
			if (status != 0) {
				// Either an error occurred or the client closed the connection.
				wait_for_commands = 0;
			} else {
				// Handle the command from the client.
				int status = handle_command(clientsock, cmd);
				if (status != 0)
					wait_for_commands = 0; // Oops.  An error occured.
			}
		} while (wait_for_commands);
		
		// Close the connection with the client.
		close(clientsock);
		
        sprintf(buf, "Closed connection from %s:%d.\n", inet_ntoa(clientaddr.sin_addr), clientaddr.sin_port);
        logger(buf, LOGGING, 1);
	}

	// Stop listening for connections.
	close(listensock);

	return EXIT_SUCCESS;
}



=======
/**
 * @file
 * @brief This file implements the storage server.
 *
 * The storage server should be named "server" and should take a single
 * command line argument that refers to the configuration file.
 * 
 * The storage server should be able to communicate with the client
 * library functions declared in storage.h and implemented in storage.c.
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <string.h>
#include <assert.h>
#include <signal.h>
#include <time.h>
#include "utils.h"
#include "database.h"

#define MAX_LISTENQUEUELEN 20	///< The maximum number of queued connections.
#define LOGGING 2 

// Use the global server file pointer located in Utils.h. Available here for file creation on server start 
FILE *sfp;

// The database variable to hold everything!
struct database *db;

/**
 * @brief Insert or update a table, key, value pair to the database.
 *
 * @param table	: the table to insert or update
 * @param key	: the key to insert or update
 * @param value	: the value to insert or update
 * @return Returns 0 on success, -1 on table not found, -2 on key not found
 */
int server_set (char *table, char *key, char *value) {
	return DB_set(db, table, key, value);
}

/**
 * @brief Process a command from the client.
 *
 * @param sock The socket connected to the client.
 * @param cmd The command received from the client.
 * @return Returns 0 on success, -1 otherwise.
 */
void process_census(char* line)
{
	LOG(("1"));
	char* name = (char*)malloc(sizeof(char));
	char* value = (char*)malloc(sizeof(char));
	LOG(("2"));
	sscanf(line, "%s %s\n", name, value);
	LOG(("3"));
	server_set (name,name,value);
	LOG(("4"));
	LOG(("%s %s\n",name,value));
	free (name);
	free (value);
}

int handle_command(int sock, char *cmd)
{
    // store raw data into database, start up
	FILE *file = fopen("census.conf", "r");
/*
	while(file!=NULL && !feof(file))
	{
		char line[40];
		char *l = fgets(line, sizeof line, file);
		if (l == line)
			process_census(line);
	}
*/
	char buf[100];
	sprintf(buf, "Processing command '%s'\n", cmd);
	logger(buf, LOGGING, 1); 
	
	char* temp = (char*)malloc(sizeof(char));
	
	int item = sscanf(cmd,"%s \n",temp);

	if(strcmp(temp,"AUTH") == 0)
	{
		char* username = (char*)malloc(sizeof(char));
		char* password = (char*)malloc(sizeof(char));
		LOG(("****%s****",cmd));
		int item = sscanf(cmd, "%s %s %s", temp, username, password);
//		GOT A PROBLEM, PENDING AUTH FUNCTION
	}

	else if(strcmp(temp,"GET") == 0)
	{
		char* table = (char*)malloc(sizeof(char));
		char* key = (char*)malloc(sizeof(char));
		int item = sscanf(cmd, "%s %s %s %s", temp, table, key, temp);
		if(item != 3)	
			LOG(("Invalid Input!\n"));
//		GOT A PROBLEM, PENDING GET FUNCTION	
	}
	if(strcmp(temp,"SET") == 0)
	{
		char* table = (char*)malloc(sizeof(char));
		char* key = (char*)malloc(sizeof(char));
		char* value = (char*)malloc(sizeof(char));
		int item = sscanf(cmd, "%s %s %s %s %s", temp, table, key, value, temp);
		LOG(("%s\n %s\n %s\n %s\n %s\n"));
		if(item != 4)	
			LOG(("Invalid Input!\n"));
//		GOT A PROBLEM, PENDING AUTH FUNCTION
	}

	
	
	// For now, just send back the command to the client.
	sendall(sock, cmd, strlen(cmd));
	sendall(sock, "\n", 1);

	return 0;
}

/**
 * @brief Start the storage server.
 *
 * This is the main entry point for the storage server.  It reads the
 * configuration file, starts listening on a port, and proccesses
 * commands from clients.
 */
int main(int argc, char *argv[])
{

    // If file logging is enabled, create the appropriate server logging file
    if(LOGGING == 2) {
        char fname[255];
        time_t ti;
        struct tm * t;
        time ( &ti );
        t = localtime ( &ti );
        sprintf(fname, "Server-%d-%d-%d-%d-%d-%d.log", t->tm_year+1900, t->tm_mon+1, t->tm_mday, t->tm_hour, t->tm_min, t->tm_sec);
        sfp = fopen(fname, "w");
    }
    
    // Initialize the database 
    db = DB_init();

	// Process command line arguments.
	// This program expects exactly one argument: the config file name.
	assert(argc > 0);
	if (argc != 2) {
		printf("Usage %s <config_file>\n", argv[0]);
		exit(EXIT_FAILURE);
	}

	char *config_file = argv[1];

	// Read the config file.
	struct config_params params;
	int status = read_config(config_file, &params);
	if (status != 0) {
		printf("Error processing config file.\n");
		exit(EXIT_FAILURE);
	}

    // Log info to the logger function
    char buf[100];
    sprintf(buf, "Server on %s:%d\n", params.server_host, params.server_port);
    logger(buf, LOGGING, 1);

	// Create a socket.
	int listensock = socket(PF_INET, SOCK_STREAM, 0);
	if (listensock < 0) {
		printf("Error creating socket.\n");
		exit(EXIT_FAILURE);
	}

	// Allow listening port to be reused if defunct.
	int yes = 1;
	status = setsockopt(listensock, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof yes);
	if (status != 0) {
		printf("Error configuring socket.\n");
		exit(EXIT_FAILURE);
	}

	// Bind it to the listening port.
	struct sockaddr_in listenaddr;
	memset(&listenaddr, 0, sizeof listenaddr);
	listenaddr.sin_family = AF_INET;
	listenaddr.sin_port = htons(params.server_port);
	inet_pton(AF_INET, params.server_host, &(listenaddr.sin_addr)); // bind to local IP address
	status = bind(listensock, (struct sockaddr*) &listenaddr, sizeof listenaddr);
	if (status != 0) {
		printf("Error binding socket.\n");
		exit(EXIT_FAILURE);
	}

	// Listen for connections.
	status = listen(listensock, MAX_LISTENQUEUELEN);
	if (status != 0) {
		printf("Error listening on socket.\n");
		exit(EXIT_FAILURE);
	}

	// Listen loop.
	int wait_for_connections = 1;
	while (wait_for_connections) {
		// Wait for a connection.
		struct sockaddr_in clientaddr;
		socklen_t clientaddrlen = sizeof clientaddr;
		int clientsock = accept(listensock, (struct sockaddr*)&clientaddr, &clientaddrlen);
		if (clientsock < 0) {
			printf("Error accepting a connection.\n");
			exit(EXIT_FAILURE);
		}

        char buf[100];
        sprintf(buf, "Got a connection from %s:%d.\n", inet_ntoa(clientaddr.sin_addr), clientaddr.sin_port);
        logger(buf, LOGGING, 1); 

		// Get commands from client.
		int wait_for_commands = 1;
		do {
			// Read a line from the client.
			char cmd[MAX_CMD_LEN];
			int status = recvline(clientsock, cmd, MAX_CMD_LEN);
			if (status != 0) {
				// Either an error occurred or the client closed the connection.
				wait_for_commands = 0;
			} else {
				// Handle the command from the client.
				int status = handle_command(clientsock, cmd);
				if (status != 0)
					wait_for_commands = 0; // Oops.  An error occured.
			}
		} while (wait_for_commands);
		
		// Close the connection with the client.
		close(clientsock);
		
        sprintf(buf, "Closed connection from %s:%d.\n", inet_ntoa(clientaddr.sin_addr), clientaddr.sin_port);
        logger(buf, LOGGING, 1);
	}

	// Stop listening for connections.
	close(listensock);

	return EXIT_SUCCESS;
}


>>>>>>> .r14
